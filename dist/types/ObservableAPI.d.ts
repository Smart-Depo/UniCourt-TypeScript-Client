import { HttpInfo } from '../http/http';
import { Configuration } from '../configuration';
import { Observable } from '../rxjsStub';
import { AddPacerCredentialRequest } from '../models/AddPacerCredentialRequest';
import { AllCourtsPacerCaseLocatorCaseSearch200Response } from '../models/AllCourtsPacerCaseLocatorCaseSearch200Response';
import { AllCourtsPacerCaseLocatorPartySearch200Response } from '../models/AllCourtsPacerCaseLocatorPartySearch200Response';
import { AreaOfLaw1 } from '../models/AreaOfLaw1';
import { AssociatedNormAttorneyResponse1 } from '../models/AssociatedNormAttorneyResponse1';
import { AssociatedNormJudgeResponse1 } from '../models/AssociatedNormJudgeResponse1';
import { AssociatedNormLawFirmResponse1 } from '../models/AssociatedNormLawFirmResponse1';
import { AssociatedNormPartyResponse1 } from '../models/AssociatedNormPartyResponse1';
import { AttorneyRepresentationType1 } from '../models/AttorneyRepresentationType1';
import { AttorneyType1 } from '../models/AttorneyType1';
import { CaseClass1 } from '../models/CaseClass1';
import { CaseCountAnalyticsByAreaOfLawResponse1 } from '../models/CaseCountAnalyticsByAreaOfLawResponse1';
import { CaseCountAnalyticsByCaseClassResponse1 } from '../models/CaseCountAnalyticsByCaseClassResponse1';
import { CaseCountAnalyticsByCaseFiledDateResponse1 } from '../models/CaseCountAnalyticsByCaseFiledDateResponse1';
import { CaseCountAnalyticsByCaseTypeGroupResponse1 } from '../models/CaseCountAnalyticsByCaseTypeGroupResponse1';
import { CaseCountAnalyticsByCaseTypeResponse1 } from '../models/CaseCountAnalyticsByCaseTypeResponse1';
import { CaseCountAnalyticsByCourtLocationResponse1 } from '../models/CaseCountAnalyticsByCourtLocationResponse1';
import { CaseCountAnalyticsByCourtResponse1 } from '../models/CaseCountAnalyticsByCourtResponse1';
import { CaseCountAnalyticsByCourtSystemResponse1 } from '../models/CaseCountAnalyticsByCourtSystemResponse1';
import { CaseCountAnalyticsByCourtTypeResponse1 } from '../models/CaseCountAnalyticsByCourtTypeResponse1';
import { CaseCountAnalyticsByJurisdictionGeoResponse1 } from '../models/CaseCountAnalyticsByJurisdictionGeoResponse1';
import { CaseCountAnalyticsByNormAttorneyResponse1 } from '../models/CaseCountAnalyticsByNormAttorneyResponse1';
import { CaseCountAnalyticsByNormJudgeResponse1 } from '../models/CaseCountAnalyticsByNormJudgeResponse1';
import { CaseCountAnalyticsByNormLawFirmResponse1 } from '../models/CaseCountAnalyticsByNormLawFirmResponse1';
import { CaseCountAnalyticsByNormPartyResponse1 } from '../models/CaseCountAnalyticsByNormPartyResponse1';
import { CaseCountAnalyticsByPartyRoleGroupResponse1 } from '../models/CaseCountAnalyticsByPartyRoleGroupResponse1';
import { CaseCountAnalyticsByPartyRoleResponse1 } from '../models/CaseCountAnalyticsByPartyRoleResponse1';
import { CaseRelationshipType1 } from '../models/CaseRelationshipType1';
import { CaseStatus1 } from '../models/CaseStatus1';
import { CaseStatusGroup1 } from '../models/CaseStatusGroup1';
import { CaseTrackPostRequest } from '../models/CaseTrackPostRequest';
import { CaseType1 } from '../models/CaseType1';
import { CaseTypeGroup1 } from '../models/CaseTypeGroup1';
import { CauseOfAction1 } from '../models/CauseOfAction1';
import { CauseOfActionAdditionalData1 } from '../models/CauseOfActionAdditionalData1';
import { CauseOfActionGroup1 } from '../models/CauseOfActionGroup1';
import { Charge1 } from '../models/Charge1';
import { ChargeAdditionalData1 } from '../models/ChargeAdditionalData1';
import { ChargeDegree1 } from '../models/ChargeDegree1';
import { ChargeGroup1 } from '../models/ChargeGroup1';
import { ChargeSeverity1 } from '../models/ChargeSeverity1';
import { Court1 } from '../models/Court1';
import { CourtLocation1 } from '../models/CourtLocation1';
import { CourtLocationResponse1 } from '../models/CourtLocationResponse1';
import { CourtSystem1 } from '../models/CourtSystem1';
import { CourtType1 } from '../models/CourtType1';
import { ExportCase200Response } from '../models/ExportCase200Response';
import { GenerateNewToken200Response } from '../models/GenerateNewToken200Response';
import { GenerateNewTokenRequest } from '../models/GenerateNewTokenRequest';
import { GetAreasOfLaw200Response } from '../models/GetAreasOfLaw200Response';
import { GetAttorneyRepresentationTypes200Response } from '../models/GetAttorneyRepresentationTypes200Response';
import { GetAttorneyTypes200Response } from '../models/GetAttorneyTypes200Response';
import { GetBillingCycles200Response } from '../models/GetBillingCycles200Response';
import { GetBillingUsageByBillingCycle200Response } from '../models/GetBillingUsageByBillingCycle200Response';
import { GetCallbacks200Response } from '../models/GetCallbacks200Response';
import { GetCase200Response } from '../models/GetCase200Response';
import { GetCase200ResponseAttorneys } from '../models/GetCase200ResponseAttorneys';
import { GetCase200ResponseAttorneysAttorneyArrayInner } from '../models/GetCase200ResponseAttorneysAttorneyArrayInner';
import { GetCase200ResponseCaseDocuments } from '../models/GetCase200ResponseCaseDocuments';
import { GetCase200ResponseDocketEntries } from '../models/GetCase200ResponseDocketEntries';
import { GetCase200ResponseDocketEntriesDocketEntryArrayInnerDocketEntryPrimaryDocuments } from '../models/GetCase200ResponseDocketEntriesDocketEntryArrayInnerDocketEntryPrimaryDocuments';
import { GetCase200ResponseDocketEntriesDocketEntryArrayInnerDocketEntryPrimaryDocumentsCaseDocumentArrayInner } from '../models/GetCase200ResponseDocketEntriesDocketEntryArrayInnerDocketEntryPrimaryDocumentsCaseDocumentArrayInner';
import { GetCase200ResponseDocketEntriesDocketEntryArrayInnerDocketEntrySecondaryDocuments } from '../models/GetCase200ResponseDocketEntriesDocketEntryArrayInnerDocketEntrySecondaryDocuments';
import { GetCase200ResponseHearings } from '../models/GetCase200ResponseHearings';
import { GetCase200ResponseJudges } from '../models/GetCase200ResponseJudges';
import { GetCase200ResponseJudgesJudgeArrayInner } from '../models/GetCase200ResponseJudgesJudgeArrayInner';
import { GetCase200ResponseParties } from '../models/GetCase200ResponseParties';
import { GetCase200ResponsePartiesPartyArrayInner } from '../models/GetCase200ResponsePartiesPartyArrayInner';
import { GetCase200ResponsePartiesPartyArrayInnerPartyAttorneyAssociations } from '../models/GetCase200ResponsePartiesPartyArrayInnerPartyAttorneyAssociations';
import { GetCase200ResponseRelatedCases } from '../models/GetCase200ResponseRelatedCases';
import { GetCaseDocumentDownloadById200Response } from '../models/GetCaseDocumentDownloadById200Response';
import { GetCaseDocumentOrderCallbacks200Response } from '../models/GetCaseDocumentOrderCallbacks200Response';
import { GetCaseExportCallbacks200Response } from '../models/GetCaseExportCallbacks200Response';
import { GetCaseRelationshipTypes200Response } from '../models/GetCaseRelationshipTypes200Response';
import { GetCaseStatusGroups200Response } from '../models/GetCaseStatusGroups200Response';
import { GetCaseTracks200Response } from '../models/GetCaseTracks200Response';
import { GetCaseTypeGroups200Response } from '../models/GetCaseTypeGroups200Response';
import { GetCaseTypes200Response } from '../models/GetCaseTypes200Response';
import { GetCaseUpdates200Response } from '../models/GetCaseUpdates200Response';
import { GetCasesClass200Response } from '../models/GetCasesClass200Response';
import { GetCasesStatus200Response } from '../models/GetCasesStatus200Response';
import { GetCausesOfAction200Response } from '../models/GetCausesOfAction200Response';
import { GetCausesOfActionAdditionalData200Response } from '../models/GetCausesOfActionAdditionalData200Response';
import { GetCausesOfActionGroup200Response } from '../models/GetCausesOfActionGroup200Response';
import { GetChargeGroups200Response } from '../models/GetChargeGroups200Response';
import { GetCharges200Response } from '../models/GetCharges200Response';
import { GetChargesAdditionalData200Response } from '../models/GetChargesAdditionalData200Response';
import { GetChargesDegree200Response } from '../models/GetChargesDegree200Response';
import { GetChargesSeverity200Response } from '../models/GetChargesSeverity200Response';
import { GetCourtCoverage200Response } from '../models/GetCourtCoverage200Response';
import { GetCourtSystems200Response } from '../models/GetCourtSystems200Response';
import { GetCourtTypes200Response } from '../models/GetCourtTypes200Response';
import { GetCourts200Response } from '../models/GetCourts200Response';
import { GetCourtsServiceStatus200Response } from '../models/GetCourtsServiceStatus200Response';
import { GetCourtsServiceStatus200ResponseCourtServiceStatusArrayInner } from '../models/GetCourtsServiceStatus200ResponseCourtServiceStatusArrayInner';
import { GetDailyUsageByDate200Response } from '../models/GetDailyUsageByDate200Response';
import { GetJudgeTypes200Response } from '../models/GetJudgeTypes200Response';
import { GetPacerCredential200Response } from '../models/GetPacerCredential200Response';
import { GetPacerCredential200ResponsePacerCredentialArrayInner } from '../models/GetPacerCredential200ResponsePacerCredentialArrayInner';
import { GetPartyRoleGroups200Response } from '../models/GetPartyRoleGroups200Response';
import { GetPartyRoles200Response } from '../models/GetPartyRoles200Response';
import { ImportPacerCaseByCourtUsingCaseNumber200Response } from '../models/ImportPacerCaseByCourtUsingCaseNumber200Response';
import { InvalidateTokenRequest } from '../models/InvalidateTokenRequest';
import { JudgeType1 } from '../models/JudgeType1';
import { JurisdictionGeo1 } from '../models/JurisdictionGeo1';
import { JurisdictionGeoResponse1 } from '../models/JurisdictionGeoResponse1';
import { ListAllTokenIds200Response } from '../models/ListAllTokenIds200Response';
import { NormAttorney1 } from '../models/NormAttorney1';
import { NormJudge1 } from '../models/NormJudge1';
import { NormLawFirm1 } from '../models/NormLawFirm1';
import { NormParty1 } from '../models/NormParty1';
import { OrderCaseDocument200Response } from '../models/OrderCaseDocument200Response';
import { OrderCaseDocumentRequest } from '../models/OrderCaseDocumentRequest';
import { PartyRole1 } from '../models/PartyRole1';
import { PartyRoleGroup1 } from '../models/PartyRoleGroup1';
import { SearchCases200Response } from '../models/SearchCases200Response';
import { SearchNormalizedAttorneys200Response } from '../models/SearchNormalizedAttorneys200Response';
import { SearchNormalizedJudges200Response } from '../models/SearchNormalizedJudges200Response';
import { SearchNormalizedLawFirms200Response } from '../models/SearchNormalizedLawFirms200Response';
import { SearchNormalizedParties200Response } from '../models/SearchNormalizedParties200Response';
import { Success1 } from '../models/Success1';
import { TrackCaseRequest } from '../models/TrackCaseRequest';
import { UpdateCase200Response } from '../models/UpdateCase200Response';
import { UpdateCaseRequest } from '../models/UpdateCaseRequest';
import { AttorneyAnalyticsAPIApiRequestFactory, AttorneyAnalyticsAPIApiResponseProcessor } from "../apis/AttorneyAnalyticsAPIApi";
export declare class ObservableAttorneyAnalyticsAPIApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: AttorneyAnalyticsAPIApiRequestFactory, responseProcessor?: AttorneyAnalyticsAPIApiResponseProcessor);
    getNormAttorneyByIdWithHttpInfo(normAttorneyId: string, _options?: Configuration): Observable<HttpInfo<NormAttorney1>>;
    getNormAttorneyById(normAttorneyId: string, _options?: Configuration): Observable<NormAttorney1>;
    getNormJudgesAssociatedWithNormAttorneyWithHttpInfo(normAttorneyId: string, q?: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<AssociatedNormJudgeResponse1>>;
    getNormJudgesAssociatedWithNormAttorney(normAttorneyId: string, q?: string, pageNumber?: number, _options?: Configuration): Observable<AssociatedNormJudgeResponse1>;
    getNormLawFirmsAssociatedWithNormAttorneyWithHttpInfo(normAttorneyId: string, q?: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<AssociatedNormLawFirmResponse1>>;
    getNormLawFirmsAssociatedWithNormAttorney(normAttorneyId: string, q?: string, pageNumber?: number, _options?: Configuration): Observable<AssociatedNormLawFirmResponse1>;
    getNormPartiesAssociatedWithNormAttorneyWithHttpInfo(normAttorneyId: string, q?: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<AssociatedNormPartyResponse1>>;
    getNormPartiesAssociatedWithNormAttorney(normAttorneyId: string, q?: string, pageNumber?: number, _options?: Configuration): Observable<AssociatedNormPartyResponse1>;
    searchNormalizedAttorneysWithHttpInfo(q?: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<SearchNormalizedAttorneys200Response>>;
    searchNormalizedAttorneys(q?: string, pageNumber?: number, _options?: Configuration): Observable<SearchNormalizedAttorneys200Response>;
    searchNormalizedAttorneysByIdWithHttpInfo(normAttorneySearchId: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<SearchNormalizedAttorneys200Response>>;
    searchNormalizedAttorneysById(normAttorneySearchId: string, pageNumber?: number, _options?: Configuration): Observable<SearchNormalizedAttorneys200Response>;
}
import { AuthenticationAPIApiRequestFactory, AuthenticationAPIApiResponseProcessor } from "../apis/AuthenticationAPIApi";
export declare class ObservableAuthenticationAPIApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: AuthenticationAPIApiRequestFactory, responseProcessor?: AuthenticationAPIApiResponseProcessor);
    generateNewTokenWithHttpInfo(generateNewTokenRequest?: GenerateNewTokenRequest, _options?: Configuration): Observable<HttpInfo<GenerateNewToken200Response>>;
    generateNewToken(generateNewTokenRequest?: GenerateNewTokenRequest, _options?: Configuration): Observable<GenerateNewToken200Response>;
    invalidateAllTokensWithHttpInfo(generateNewTokenRequest?: GenerateNewTokenRequest, _options?: Configuration): Observable<HttpInfo<Success1>>;
    invalidateAllTokens(generateNewTokenRequest?: GenerateNewTokenRequest, _options?: Configuration): Observable<Success1>;
    invalidateTokenWithHttpInfo(invalidateTokenRequest?: InvalidateTokenRequest, _options?: Configuration): Observable<HttpInfo<Success1>>;
    invalidateToken(invalidateTokenRequest?: InvalidateTokenRequest, _options?: Configuration): Observable<Success1>;
    listAllTokenIdsWithHttpInfo(generateNewTokenRequest?: GenerateNewTokenRequest, _options?: Configuration): Observable<HttpInfo<ListAllTokenIds200Response>>;
    listAllTokenIds(generateNewTokenRequest?: GenerateNewTokenRequest, _options?: Configuration): Observable<ListAllTokenIds200Response>;
}
import { CallbackAPIApiRequestFactory, CallbackAPIApiResponseProcessor } from "../apis/CallbackAPIApi";
export declare class ObservableCallbackAPIApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CallbackAPIApiRequestFactory, responseProcessor?: CallbackAPIApiResponseProcessor);
    getCallbacksWithHttpInfo(date?: Date, status?: 'IN_PROGRESS' | 'COMPLETE' | 'FAILURE', _options?: Configuration): Observable<HttpInfo<GetCallbacks200Response>>;
    getCallbacks(date?: Date, status?: 'IN_PROGRESS' | 'COMPLETE' | 'FAILURE', _options?: Configuration): Observable<GetCallbacks200Response>;
}
import { CaseAnalyticsAPIApiRequestFactory, CaseAnalyticsAPIApiResponseProcessor } from "../apis/CaseAnalyticsAPIApi";
export declare class ObservableCaseAnalyticsAPIApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CaseAnalyticsAPIApiRequestFactory, responseProcessor?: CaseAnalyticsAPIApiResponseProcessor);
    getCaseCountAnalyticsByAreaOfLawWithHttpInfo(q?: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<CaseCountAnalyticsByAreaOfLawResponse1>>;
    getCaseCountAnalyticsByAreaOfLaw(q?: string, pageNumber?: number, _options?: Configuration): Observable<CaseCountAnalyticsByAreaOfLawResponse1>;
    getCaseCountAnalyticsByCaseClassWithHttpInfo(q?: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<CaseCountAnalyticsByCaseClassResponse1>>;
    getCaseCountAnalyticsByCaseClass(q?: string, pageNumber?: number, _options?: Configuration): Observable<CaseCountAnalyticsByCaseClassResponse1>;
    getCaseCountAnalyticsByCaseFiledDateWithHttpInfo(groupBy: 'Yearly' | 'Quarterly' | 'Monthly' | 'Weekly', q?: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<CaseCountAnalyticsByCaseFiledDateResponse1>>;
    getCaseCountAnalyticsByCaseFiledDate(groupBy: 'Yearly' | 'Quarterly' | 'Monthly' | 'Weekly', q?: string, pageNumber?: number, _options?: Configuration): Observable<CaseCountAnalyticsByCaseFiledDateResponse1>;
    getCaseCountAnalyticsByCaseTypeWithHttpInfo(q?: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<CaseCountAnalyticsByCaseTypeResponse1>>;
    getCaseCountAnalyticsByCaseType(q?: string, pageNumber?: number, _options?: Configuration): Observable<CaseCountAnalyticsByCaseTypeResponse1>;
    getCaseCountAnalyticsByCaseTypeGroupWithHttpInfo(q?: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<CaseCountAnalyticsByCaseTypeGroupResponse1>>;
    getCaseCountAnalyticsByCaseTypeGroup(q?: string, pageNumber?: number, _options?: Configuration): Observable<CaseCountAnalyticsByCaseTypeGroupResponse1>;
    getCaseCountAnalyticsByCourtWithHttpInfo(q?: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<CaseCountAnalyticsByCourtResponse1>>;
    getCaseCountAnalyticsByCourt(q?: string, pageNumber?: number, _options?: Configuration): Observable<CaseCountAnalyticsByCourtResponse1>;
    getCaseCountAnalyticsByCourtLocationWithHttpInfo(q?: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<CaseCountAnalyticsByCourtLocationResponse1>>;
    getCaseCountAnalyticsByCourtLocation(q?: string, pageNumber?: number, _options?: Configuration): Observable<CaseCountAnalyticsByCourtLocationResponse1>;
    getCaseCountAnalyticsByCourtSystemWithHttpInfo(q?: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<CaseCountAnalyticsByCourtSystemResponse1>>;
    getCaseCountAnalyticsByCourtSystem(q?: string, pageNumber?: number, _options?: Configuration): Observable<CaseCountAnalyticsByCourtSystemResponse1>;
    getCaseCountAnalyticsByCourtTypeWithHttpInfo(q?: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<CaseCountAnalyticsByCourtTypeResponse1>>;
    getCaseCountAnalyticsByCourtType(q?: string, pageNumber?: number, _options?: Configuration): Observable<CaseCountAnalyticsByCourtTypeResponse1>;
    getCaseCountAnalyticsByJurisdictionGeoWithHttpInfo(q?: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<CaseCountAnalyticsByJurisdictionGeoResponse1>>;
    getCaseCountAnalyticsByJurisdictionGeo(q?: string, pageNumber?: number, _options?: Configuration): Observable<CaseCountAnalyticsByJurisdictionGeoResponse1>;
    getCaseCountAnalyticsByNormAttorneyWithHttpInfo(q?: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<CaseCountAnalyticsByNormAttorneyResponse1>>;
    getCaseCountAnalyticsByNormAttorney(q?: string, pageNumber?: number, _options?: Configuration): Observable<CaseCountAnalyticsByNormAttorneyResponse1>;
    getCaseCountAnalyticsByNormJudgeWithHttpInfo(q?: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<CaseCountAnalyticsByNormJudgeResponse1>>;
    getCaseCountAnalyticsByNormJudge(q?: string, pageNumber?: number, _options?: Configuration): Observable<CaseCountAnalyticsByNormJudgeResponse1>;
    getCaseCountAnalyticsByNormLawFirmWithHttpInfo(q?: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<CaseCountAnalyticsByNormLawFirmResponse1>>;
    getCaseCountAnalyticsByNormLawFirm(q?: string, pageNumber?: number, _options?: Configuration): Observable<CaseCountAnalyticsByNormLawFirmResponse1>;
    getCaseCountAnalyticsByNormPartyWithHttpInfo(q?: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<CaseCountAnalyticsByNormPartyResponse1>>;
    getCaseCountAnalyticsByNormParty(q?: string, pageNumber?: number, _options?: Configuration): Observable<CaseCountAnalyticsByNormPartyResponse1>;
    getCaseCountAnalyticsByOpposingNormAttorneyForANormAttorneyWithHttpInfo(normAttorneyId: string, q?: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<CaseCountAnalyticsByNormAttorneyResponse1>>;
    getCaseCountAnalyticsByOpposingNormAttorneyForANormAttorney(normAttorneyId: string, q?: string, pageNumber?: number, _options?: Configuration): Observable<CaseCountAnalyticsByNormAttorneyResponse1>;
    getCaseCountAnalyticsByOpposingNormLawFirmForANormLawFirmWithHttpInfo(normLawFirmId: string, q?: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<CaseCountAnalyticsByNormLawFirmResponse1>>;
    getCaseCountAnalyticsByOpposingNormLawFirmForANormLawFirm(normLawFirmId: string, q?: string, pageNumber?: number, _options?: Configuration): Observable<CaseCountAnalyticsByNormLawFirmResponse1>;
    getCaseCountAnalyticsByOpposingNormPartyForANormPartyWithHttpInfo(normPartyId: string, q?: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<CaseCountAnalyticsByNormPartyResponse1>>;
    getCaseCountAnalyticsByOpposingNormPartyForANormParty(normPartyId: string, q?: string, pageNumber?: number, _options?: Configuration): Observable<CaseCountAnalyticsByNormPartyResponse1>;
    getCaseCountAnalyticsByPartyRoleWithHttpInfo(q?: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<CaseCountAnalyticsByPartyRoleResponse1>>;
    getCaseCountAnalyticsByPartyRole(q?: string, pageNumber?: number, _options?: Configuration): Observable<CaseCountAnalyticsByPartyRoleResponse1>;
    getCaseCountAnalyticsByPartyRoleGroupWithHttpInfo(q?: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<CaseCountAnalyticsByPartyRoleGroupResponse1>>;
    getCaseCountAnalyticsByPartyRoleGroup(q?: string, pageNumber?: number, _options?: Configuration): Observable<CaseCountAnalyticsByPartyRoleGroupResponse1>;
}
import { CaseDocketAPIApiRequestFactory, CaseDocketAPIApiResponseProcessor } from "../apis/CaseDocketAPIApi";
export declare class ObservableCaseDocketAPIApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CaseDocketAPIApiRequestFactory, responseProcessor?: CaseDocketAPIApiResponseProcessor);
    getAttorneyAssociatedPartiesWithHttpInfo(attorneyId: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<GetCase200ResponsePartiesPartyArrayInnerPartyAttorneyAssociations>>;
    getAttorneyAssociatedParties(attorneyId: string, pageNumber?: number, _options?: Configuration): Observable<GetCase200ResponsePartiesPartyArrayInnerPartyAttorneyAssociations>;
    getAttorneyByIdWithHttpInfo(attorneyId: string, _options?: Configuration): Observable<HttpInfo<GetCase200ResponseAttorneysAttorneyArrayInner>>;
    getAttorneyById(attorneyId: string, _options?: Configuration): Observable<GetCase200ResponseAttorneysAttorneyArrayInner>;
    getCaseWithHttpInfo(caseId: string, _options?: Configuration): Observable<HttpInfo<GetCase200Response>>;
    getCase(caseId: string, _options?: Configuration): Observable<GetCase200Response>;
    getCaseAttorneysWithHttpInfo(caseId: string, isVisible?: boolean, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<GetCase200ResponseAttorneys>>;
    getCaseAttorneys(caseId: string, isVisible?: boolean, pageNumber?: number, _options?: Configuration): Observable<GetCase200ResponseAttorneys>;
    getCaseDocketEntriesWithHttpInfo(caseId: string, docketNumber?: number, sortBy?: 'latest to oldest' | 'oldest to latest', pageNumber?: number, _options?: Configuration): Observable<HttpInfo<GetCase200ResponseDocketEntries>>;
    getCaseDocketEntries(caseId: string, docketNumber?: number, sortBy?: 'latest to oldest' | 'oldest to latest', pageNumber?: number, _options?: Configuration): Observable<GetCase200ResponseDocketEntries>;
    getCaseHearingsWithHttpInfo(caseId: string, sortBy?: 'latest to oldest' | 'oldest to latest', pageNumber?: number, _options?: Configuration): Observable<HttpInfo<GetCase200ResponseHearings>>;
    getCaseHearings(caseId: string, sortBy?: 'latest to oldest' | 'oldest to latest', pageNumber?: number, _options?: Configuration): Observable<GetCase200ResponseHearings>;
    getCaseJudgesWithHttpInfo(caseId: string, isVisible?: boolean, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<GetCase200ResponseJudges>>;
    getCaseJudges(caseId: string, isVisible?: boolean, pageNumber?: number, _options?: Configuration): Observable<GetCase200ResponseJudges>;
    getCasePartiesWithHttpInfo(caseId: string, isVisible?: boolean, pageNumber?: number, partyRoleId?: string, partyRoleGroupId?: string, attorneyRepresentationTypeId?: string, partyClassificationType?: 'INDIVIDUAL' | 'COMPANY' | 'OTHER', _options?: Configuration): Observable<HttpInfo<GetCase200ResponseParties>>;
    getCaseParties(caseId: string, isVisible?: boolean, pageNumber?: number, partyRoleId?: string, partyRoleGroupId?: string, attorneyRepresentationTypeId?: string, partyClassificationType?: 'INDIVIDUAL' | 'COMPANY' | 'OTHER', _options?: Configuration): Observable<GetCase200ResponseParties>;
    getCaseRelatedCasesWithHttpInfo(caseId: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<GetCase200ResponseRelatedCases>>;
    getCaseRelatedCases(caseId: string, pageNumber?: number, _options?: Configuration): Observable<GetCase200ResponseRelatedCases>;
    getJudgeByIdWithHttpInfo(judgeId: string, _options?: Configuration): Observable<HttpInfo<GetCase200ResponseJudgesJudgeArrayInner>>;
    getJudgeById(judgeId: string, _options?: Configuration): Observable<GetCase200ResponseJudgesJudgeArrayInner>;
    getPartyAssociatedAttorneysWithHttpInfo(partyId: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<GetCase200ResponsePartiesPartyArrayInnerPartyAttorneyAssociations>>;
    getPartyAssociatedAttorneys(partyId: string, pageNumber?: number, _options?: Configuration): Observable<GetCase200ResponsePartiesPartyArrayInnerPartyAttorneyAssociations>;
    getPartyByIdWithHttpInfo(partyId: string, _options?: Configuration): Observable<HttpInfo<GetCase200ResponsePartiesPartyArrayInner>>;
    getPartyById(partyId: string, _options?: Configuration): Observable<GetCase200ResponsePartiesPartyArrayInner>;
    getPrimaryDocumentsForDocketEntriesWithHttpInfo(caseId: string, docketNumber: number, inLibrary?: boolean, afterFirstFetchDate?: Date, libraryDate?: Date, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<GetCase200ResponseDocketEntriesDocketEntryArrayInnerDocketEntryPrimaryDocuments>>;
    getPrimaryDocumentsForDocketEntries(caseId: string, docketNumber: number, inLibrary?: boolean, afterFirstFetchDate?: Date, libraryDate?: Date, pageNumber?: number, _options?: Configuration): Observable<GetCase200ResponseDocketEntriesDocketEntryArrayInnerDocketEntryPrimaryDocuments>;
    getSecondaryDocumentsForDocketEntriesWithHttpInfo(caseId: string, docketNumber: number, inLibrary?: boolean, afterFirstFetchDate?: Date, libraryDate?: Date, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<GetCase200ResponseDocketEntriesDocketEntryArrayInnerDocketEntrySecondaryDocuments>>;
    getSecondaryDocumentsForDocketEntries(caseId: string, docketNumber: number, inLibrary?: boolean, afterFirstFetchDate?: Date, libraryDate?: Date, pageNumber?: number, _options?: Configuration): Observable<GetCase200ResponseDocketEntriesDocketEntryArrayInnerDocketEntrySecondaryDocuments>;
}
import { CaseDocumentsAPIApiRequestFactory, CaseDocumentsAPIApiResponseProcessor } from "../apis/CaseDocumentsAPIApi";
export declare class ObservableCaseDocumentsAPIApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CaseDocumentsAPIApiRequestFactory, responseProcessor?: CaseDocumentsAPIApiResponseProcessor);
    getCaseDocumentDownloadByIdWithHttpInfo(caseDocumentId: string, isPreviewDocument?: boolean, _options?: Configuration): Observable<HttpInfo<GetCaseDocumentDownloadById200Response>>;
    getCaseDocumentDownloadById(caseDocumentId: string, isPreviewDocument?: boolean, _options?: Configuration): Observable<GetCaseDocumentDownloadById200Response>;
    getCaseDocumentOrderCallbackByIdWithHttpInfo(caseDocumentOrderCallbackId: string, _options?: Configuration): Observable<HttpInfo<OrderCaseDocument200Response>>;
    getCaseDocumentOrderCallbackById(caseDocumentOrderCallbackId: string, _options?: Configuration): Observable<OrderCaseDocument200Response>;
    getCaseDocumentOrderCallbacksWithHttpInfo(date?: Date, status?: 'IN_PROGRESS' | 'DELAYED' | 'COMPLETE' | 'FAILURE', pageNumber?: number, _options?: Configuration): Observable<HttpInfo<GetCaseDocumentOrderCallbacks200Response>>;
    getCaseDocumentOrderCallbacks(date?: Date, status?: 'IN_PROGRESS' | 'DELAYED' | 'COMPLETE' | 'FAILURE', pageNumber?: number, _options?: Configuration): Observable<GetCaseDocumentOrderCallbacks200Response>;
    getCaseDocumentsWithHttpInfo(caseId: string, inLibrary?: boolean, afterFirstFetchDate?: Date, libraryDate?: Date, firstFetchDate?: Date, sortBy?: 'latest to oldest' | 'oldest to latest', pageNumber?: number, _options?: Configuration): Observable<HttpInfo<GetCase200ResponseCaseDocuments>>;
    getCaseDocuments(caseId: string, inLibrary?: boolean, afterFirstFetchDate?: Date, libraryDate?: Date, firstFetchDate?: Date, sortBy?: 'latest to oldest' | 'oldest to latest', pageNumber?: number, _options?: Configuration): Observable<GetCase200ResponseCaseDocuments>;
    getDocumentByIdWithHttpInfo(caseDocumentId: string, _options?: Configuration): Observable<HttpInfo<GetCase200ResponseDocketEntriesDocketEntryArrayInnerDocketEntryPrimaryDocumentsCaseDocumentArrayInner>>;
    getDocumentById(caseDocumentId: string, _options?: Configuration): Observable<GetCase200ResponseDocketEntriesDocketEntryArrayInnerDocketEntryPrimaryDocumentsCaseDocumentArrayInner>;
    orderCaseDocumentWithHttpInfo(orderCaseDocumentRequest?: OrderCaseDocumentRequest, _options?: Configuration): Observable<HttpInfo<OrderCaseDocument200Response>>;
    orderCaseDocument(orderCaseDocumentRequest?: OrderCaseDocumentRequest, _options?: Configuration): Observable<OrderCaseDocument200Response>;
}
import { CaseExportAPIApiRequestFactory, CaseExportAPIApiResponseProcessor } from "../apis/CaseExportAPIApi";
export declare class ObservableCaseExportAPIApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CaseExportAPIApiRequestFactory, responseProcessor?: CaseExportAPIApiResponseProcessor);
    exportCaseWithHttpInfo(caseId: string, _options?: Configuration): Observable<HttpInfo<ExportCase200Response>>;
    exportCase(caseId: string, _options?: Configuration): Observable<ExportCase200Response>;
    getCaseExportCallbackByIdWithHttpInfo(caseExportCallbackId: string, _options?: Configuration): Observable<HttpInfo<ExportCase200Response>>;
    getCaseExportCallbackById(caseExportCallbackId: string, _options?: Configuration): Observable<ExportCase200Response>;
    getCaseExportCallbacksWithHttpInfo(date?: Date, status?: 'IN_PROGRESS' | 'COMPLETE' | 'FAILURE', pageNumber?: number, _options?: Configuration): Observable<HttpInfo<GetCaseExportCallbacks200Response>>;
    getCaseExportCallbacks(date?: Date, status?: 'IN_PROGRESS' | 'COMPLETE' | 'FAILURE', pageNumber?: number, _options?: Configuration): Observable<GetCaseExportCallbacks200Response>;
}
import { CaseSearchAPIApiRequestFactory, CaseSearchAPIApiResponseProcessor } from "../apis/CaseSearchAPIApi";
export declare class ObservableCaseSearchAPIApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CaseSearchAPIApiRequestFactory, responseProcessor?: CaseSearchAPIApiResponseProcessor);
    searchCasesWithHttpInfo(q: string, sort?: 'filedDate' | 'relevancy', order?: 'asc' | 'desc', pageNumber?: number, _options?: Configuration): Observable<HttpInfo<SearchCases200Response>>;
    searchCases(q: string, sort?: 'filedDate' | 'relevancy', order?: 'asc' | 'desc', pageNumber?: number, _options?: Configuration): Observable<SearchCases200Response>;
    searchCasesByIdWithHttpInfo(caseSearchId: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<SearchCases200Response>>;
    searchCasesById(caseSearchId: string, pageNumber?: number, _options?: Configuration): Observable<SearchCases200Response>;
}
import { CaseTrackingAPIApiRequestFactory, CaseTrackingAPIApiResponseProcessor } from "../apis/CaseTrackingAPIApi";
export declare class ObservableCaseTrackingAPIApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CaseTrackingAPIApiRequestFactory, responseProcessor?: CaseTrackingAPIApiResponseProcessor);
    getCaseTrackByIdWithHttpInfo(caseId: string, _options?: Configuration): Observable<HttpInfo<CaseTrackPostRequest>>;
    getCaseTrackById(caseId: string, _options?: Configuration): Observable<CaseTrackPostRequest>;
    getCaseTracksWithHttpInfo(lastFetchDate?: Date, lastFetchDateWithUpdates?: Date, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<GetCaseTracks200Response>>;
    getCaseTracks(lastFetchDate?: Date, lastFetchDateWithUpdates?: Date, pageNumber?: number, _options?: Configuration): Observable<GetCaseTracks200Response>;
    removeCaseTrackByIdWithHttpInfo(caseId: string, _options?: Configuration): Observable<HttpInfo<Success1>>;
    removeCaseTrackById(caseId: string, _options?: Configuration): Observable<Success1>;
    trackCaseWithHttpInfo(trackCaseRequest?: TrackCaseRequest, _options?: Configuration): Observable<HttpInfo<Success1>>;
    trackCase(trackCaseRequest?: TrackCaseRequest, _options?: Configuration): Observable<Success1>;
}
import { CaseUpdateAPIApiRequestFactory, CaseUpdateAPIApiResponseProcessor } from "../apis/CaseUpdateAPIApi";
export declare class ObservableCaseUpdateAPIApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CaseUpdateAPIApiRequestFactory, responseProcessor?: CaseUpdateAPIApiResponseProcessor);
    getCaseUpdateByCaseIdWithHttpInfo(caseId: string, _options?: Configuration): Observable<HttpInfo<UpdateCase200Response>>;
    getCaseUpdateByCaseId(caseId: string, _options?: Configuration): Observable<UpdateCase200Response>;
    getCaseUpdatesWithHttpInfo(caseId?: string, requestedDate?: Date, status?: 'IN_PROGRESS' | 'COMPLETE' | 'FAILURE', pageNumber?: number, _options?: Configuration): Observable<HttpInfo<GetCaseUpdates200Response>>;
    getCaseUpdates(caseId?: string, requestedDate?: Date, status?: 'IN_PROGRESS' | 'COMPLETE' | 'FAILURE', pageNumber?: number, _options?: Configuration): Observable<GetCaseUpdates200Response>;
    updateCaseWithHttpInfo(updateCaseRequest?: UpdateCaseRequest, _options?: Configuration): Observable<HttpInfo<UpdateCase200Response>>;
    updateCase(updateCaseRequest?: UpdateCaseRequest, _options?: Configuration): Observable<UpdateCase200Response>;
}
import { CourtAvailabilityAPIApiRequestFactory, CourtAvailabilityAPIApiResponseProcessor } from "../apis/CourtAvailabilityAPIApi";
export declare class ObservableCourtAvailabilityAPIApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CourtAvailabilityAPIApiRequestFactory, responseProcessor?: CourtAvailabilityAPIApiResponseProcessor);
    getCourtCoverageWithHttpInfo(courtId: string, _options?: Configuration): Observable<HttpInfo<GetCourtCoverage200Response>>;
    getCourtCoverage(courtId: string, _options?: Configuration): Observable<GetCourtCoverage200Response>;
}
import { CourtStandardsAPIApiRequestFactory, CourtStandardsAPIApiResponseProcessor } from "../apis/CourtStandardsAPIApi";
export declare class ObservableCourtStandardsAPIApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CourtStandardsAPIApiRequestFactory, responseProcessor?: CourtStandardsAPIApiResponseProcessor);
    getAppealCourtsForCourtWithHttpInfo(courtId: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<HttpInfo<GetCourts200Response>>;
    getAppealCourtsForCourt(courtId: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<GetCourts200Response>;
    getAreaOfLawWithHttpInfo(areaOfLawId: string, _options?: Configuration): Observable<HttpInfo<AreaOfLaw1>>;
    getAreaOfLaw(areaOfLawId: string, _options?: Configuration): Observable<AreaOfLaw1>;
    getAreasOfLawWithHttpInfo(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<HttpInfo<GetAreasOfLaw200Response>>;
    getAreasOfLaw(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<GetAreasOfLaw200Response>;
    getAttorneyRepresentationTypeWithHttpInfo(attorneyRepresentationTypeId: string, _options?: Configuration): Observable<HttpInfo<AttorneyRepresentationType1>>;
    getAttorneyRepresentationType(attorneyRepresentationTypeId: string, _options?: Configuration): Observable<AttorneyRepresentationType1>;
    getAttorneyRepresentationTypesWithHttpInfo(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<HttpInfo<GetAttorneyRepresentationTypes200Response>>;
    getAttorneyRepresentationTypes(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<GetAttorneyRepresentationTypes200Response>;
    getAttorneyTypeWithHttpInfo(attorneyTypeId: string, _options?: Configuration): Observable<HttpInfo<AttorneyType1>>;
    getAttorneyType(attorneyTypeId: string, _options?: Configuration): Observable<AttorneyType1>;
    getAttorneyTypesWithHttpInfo(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<HttpInfo<GetAttorneyTypes200Response>>;
    getAttorneyTypes(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<GetAttorneyTypes200Response>;
    getCaseClassWithHttpInfo(caseClassId: string, _options?: Configuration): Observable<HttpInfo<CaseClass1>>;
    getCaseClass(caseClassId: string, _options?: Configuration): Observable<CaseClass1>;
    getCaseRelationshipTypeWithHttpInfo(caseRelationshipTypeId: string, _options?: Configuration): Observable<HttpInfo<CaseRelationshipType1>>;
    getCaseRelationshipType(caseRelationshipTypeId: string, _options?: Configuration): Observable<CaseRelationshipType1>;
    getCaseRelationshipTypesWithHttpInfo(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<HttpInfo<GetCaseRelationshipTypes200Response>>;
    getCaseRelationshipTypes(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<GetCaseRelationshipTypes200Response>;
    getCaseStatusWithHttpInfo(caseStatusId: string, _options?: Configuration): Observable<HttpInfo<CaseStatus1>>;
    getCaseStatus(caseStatusId: string, _options?: Configuration): Observable<CaseStatus1>;
    getCaseStatusGroupWithHttpInfo(caseStatusGroupId: string, _options?: Configuration): Observable<HttpInfo<CaseStatusGroup1>>;
    getCaseStatusGroup(caseStatusGroupId: string, _options?: Configuration): Observable<CaseStatusGroup1>;
    getCaseStatusGroupsWithHttpInfo(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<HttpInfo<GetCaseStatusGroups200Response>>;
    getCaseStatusGroups(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<GetCaseStatusGroups200Response>;
    getCaseTypeWithHttpInfo(caseTypeId: string, _options?: Configuration): Observable<HttpInfo<CaseType1>>;
    getCaseType(caseTypeId: string, _options?: Configuration): Observable<CaseType1>;
    getCaseTypeGroupWithHttpInfo(caseTypeGroupId: string, _options?: Configuration): Observable<HttpInfo<CaseTypeGroup1>>;
    getCaseTypeGroup(caseTypeGroupId: string, _options?: Configuration): Observable<CaseTypeGroup1>;
    getCaseTypeGroupsWithHttpInfo(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<HttpInfo<GetCaseTypeGroups200Response>>;
    getCaseTypeGroups(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<GetCaseTypeGroups200Response>;
    getCaseTypesWithHttpInfo(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<HttpInfo<GetCaseTypes200Response>>;
    getCaseTypes(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<GetCaseTypes200Response>;
    getCasesClassWithHttpInfo(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<HttpInfo<GetCasesClass200Response>>;
    getCasesClass(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<GetCasesClass200Response>;
    getCasesStatusWithHttpInfo(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<HttpInfo<GetCasesStatus200Response>>;
    getCasesStatus(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<GetCasesStatus200Response>;
    getCauseOfActionWithHttpInfo(causeOfActionId: string, _options?: Configuration): Observable<HttpInfo<CauseOfAction1>>;
    getCauseOfAction(causeOfActionId: string, _options?: Configuration): Observable<CauseOfAction1>;
    getCauseOfActionAdditionalDataWithHttpInfo(causeOfActionAdditionalDataId: string, _options?: Configuration): Observable<HttpInfo<CauseOfActionAdditionalData1>>;
    getCauseOfActionAdditionalData(causeOfActionAdditionalDataId: string, _options?: Configuration): Observable<CauseOfActionAdditionalData1>;
    getCauseOfActionGroupWithHttpInfo(causeOfActionGroupId: string, _options?: Configuration): Observable<HttpInfo<CauseOfActionGroup1>>;
    getCauseOfActionGroup(causeOfActionGroupId: string, _options?: Configuration): Observable<CauseOfActionGroup1>;
    getCausesOfActionWithHttpInfo(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<HttpInfo<GetCausesOfAction200Response>>;
    getCausesOfAction(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<GetCausesOfAction200Response>;
    getCausesOfActionAdditionalDataWithHttpInfo(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<HttpInfo<GetCausesOfActionAdditionalData200Response>>;
    getCausesOfActionAdditionalData(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<GetCausesOfActionAdditionalData200Response>;
    getCausesOfActionGroupWithHttpInfo(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<HttpInfo<GetCausesOfActionGroup200Response>>;
    getCausesOfActionGroup(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<GetCausesOfActionGroup200Response>;
    getChargeWithHttpInfo(chargeId: string, _options?: Configuration): Observable<HttpInfo<Charge1>>;
    getCharge(chargeId: string, _options?: Configuration): Observable<Charge1>;
    getChargeAdditionalDataWithHttpInfo(chargeAdditionalDataId: string, _options?: Configuration): Observable<HttpInfo<ChargeAdditionalData1>>;
    getChargeAdditionalData(chargeAdditionalDataId: string, _options?: Configuration): Observable<ChargeAdditionalData1>;
    getChargeDegreeWithHttpInfo(chargeDegreeId: string, _options?: Configuration): Observable<HttpInfo<ChargeDegree1>>;
    getChargeDegree(chargeDegreeId: string, _options?: Configuration): Observable<ChargeDegree1>;
    getChargeGroupWithHttpInfo(chargeGroupId: string, _options?: Configuration): Observable<HttpInfo<ChargeGroup1>>;
    getChargeGroup(chargeGroupId: string, _options?: Configuration): Observable<ChargeGroup1>;
    getChargeGroupsWithHttpInfo(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<HttpInfo<GetChargeGroups200Response>>;
    getChargeGroups(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<GetChargeGroups200Response>;
    getChargeSeverityWithHttpInfo(chargeSeverityId: string, _options?: Configuration): Observable<HttpInfo<ChargeSeverity1>>;
    getChargeSeverity(chargeSeverityId: string, _options?: Configuration): Observable<ChargeSeverity1>;
    getChargesWithHttpInfo(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<HttpInfo<GetCharges200Response>>;
    getCharges(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<GetCharges200Response>;
    getChargesAdditionalDataWithHttpInfo(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<HttpInfo<GetChargesAdditionalData200Response>>;
    getChargesAdditionalData(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<GetChargesAdditionalData200Response>;
    getChargesDegreeWithHttpInfo(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<HttpInfo<GetChargesDegree200Response>>;
    getChargesDegree(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<GetChargesDegree200Response>;
    getChargesSeverityWithHttpInfo(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<HttpInfo<GetChargesSeverity200Response>>;
    getChargesSeverity(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<GetChargesSeverity200Response>;
    getCourtWithHttpInfo(courtId: string, _options?: Configuration): Observable<HttpInfo<Court1>>;
    getCourt(courtId: string, _options?: Configuration): Observable<Court1>;
    getCourtLocationWithHttpInfo(courtLocationId: string, _options?: Configuration): Observable<HttpInfo<CourtLocation1>>;
    getCourtLocation(courtLocationId: string, _options?: Configuration): Observable<CourtLocation1>;
    getCourtLocationsWithHttpInfo(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<HttpInfo<CourtLocationResponse1>>;
    getCourtLocations(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<CourtLocationResponse1>;
    getCourtLocationsForCourtWithHttpInfo(courtId: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<HttpInfo<CourtLocationResponse1>>;
    getCourtLocationsForCourt(courtId: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<CourtLocationResponse1>;
    getCourtServiceStatusWithHttpInfo(courtServiceStatusId: string, _options?: Configuration): Observable<HttpInfo<GetCourtsServiceStatus200ResponseCourtServiceStatusArrayInner>>;
    getCourtServiceStatus(courtServiceStatusId: string, _options?: Configuration): Observable<GetCourtsServiceStatus200ResponseCourtServiceStatusArrayInner>;
    getCourtSystemWithHttpInfo(courtSystemId: string, _options?: Configuration): Observable<HttpInfo<CourtSystem1>>;
    getCourtSystem(courtSystemId: string, _options?: Configuration): Observable<CourtSystem1>;
    getCourtSystemsWithHttpInfo(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<HttpInfo<GetCourtSystems200Response>>;
    getCourtSystems(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<GetCourtSystems200Response>;
    getCourtTypeWithHttpInfo(courtTypeId: string, _options?: Configuration): Observable<HttpInfo<CourtType1>>;
    getCourtType(courtTypeId: string, _options?: Configuration): Observable<CourtType1>;
    getCourtTypesWithHttpInfo(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<HttpInfo<GetCourtTypes200Response>>;
    getCourtTypes(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<GetCourtTypes200Response>;
    getCourtsWithHttpInfo(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<HttpInfo<GetCourts200Response>>;
    getCourts(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<GetCourts200Response>;
    getCourtsForCourtLocationWithHttpInfo(courtLocationId: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<HttpInfo<GetCourts200Response>>;
    getCourtsForCourtLocation(courtLocationId: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<GetCourts200Response>;
    getCourtsForJurisdictionGeoWithHttpInfo(jurisdictionGeoId: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<HttpInfo<GetCourts200Response>>;
    getCourtsForJurisdictionGeo(jurisdictionGeoId: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<GetCourts200Response>;
    getCourtsServiceStatusWithHttpInfo(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<HttpInfo<GetCourtsServiceStatus200Response>>;
    getCourtsServiceStatus(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<GetCourtsServiceStatus200Response>;
    getJudgeTypeWithHttpInfo(judgeTypeId: string, _options?: Configuration): Observable<HttpInfo<JudgeType1>>;
    getJudgeType(judgeTypeId: string, _options?: Configuration): Observable<JudgeType1>;
    getJudgeTypesWithHttpInfo(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<HttpInfo<GetJudgeTypes200Response>>;
    getJudgeTypes(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<GetJudgeTypes200Response>;
    getJurisdictionGeoWithHttpInfo(jurisdictionGeoId: string, _options?: Configuration): Observable<HttpInfo<JurisdictionGeo1>>;
    getJurisdictionGeo(jurisdictionGeoId: string, _options?: Configuration): Observable<JurisdictionGeo1>;
    getJurisdictionGeoForCourtWithHttpInfo(courtId: string, pageNumber?: number, sort?: 'state', order?: 'asc' | 'desc', _options?: Configuration): Observable<HttpInfo<JurisdictionGeoResponse1>>;
    getJurisdictionGeoForCourt(courtId: string, pageNumber?: number, sort?: 'state', order?: 'asc' | 'desc', _options?: Configuration): Observable<JurisdictionGeoResponse1>;
    getJurisdictionsGeoWithHttpInfo(q?: string, pageNumber?: number, sort?: 'state', order?: 'asc' | 'desc', _options?: Configuration): Observable<HttpInfo<JurisdictionGeoResponse1>>;
    getJurisdictionsGeo(q?: string, pageNumber?: number, sort?: 'state', order?: 'asc' | 'desc', _options?: Configuration): Observable<JurisdictionGeoResponse1>;
    getPartyRoleWithHttpInfo(partyRoleId: string, _options?: Configuration): Observable<HttpInfo<PartyRole1>>;
    getPartyRole(partyRoleId: string, _options?: Configuration): Observable<PartyRole1>;
    getPartyRoleGroupWithHttpInfo(partyRoleGroupId: string, _options?: Configuration): Observable<HttpInfo<PartyRoleGroup1>>;
    getPartyRoleGroup(partyRoleGroupId: string, _options?: Configuration): Observable<PartyRoleGroup1>;
    getPartyRoleGroupsWithHttpInfo(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<HttpInfo<GetPartyRoleGroups200Response>>;
    getPartyRoleGroups(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<GetPartyRoleGroups200Response>;
    getPartyRolesWithHttpInfo(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<HttpInfo<GetPartyRoles200Response>>;
    getPartyRoles(q?: string, pageNumber?: number, sort?: 'name', order?: 'asc' | 'desc', _options?: Configuration): Observable<GetPartyRoles200Response>;
}
import { JudgeAnalyticsAPIApiRequestFactory, JudgeAnalyticsAPIApiResponseProcessor } from "../apis/JudgeAnalyticsAPIApi";
export declare class ObservableJudgeAnalyticsAPIApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: JudgeAnalyticsAPIApiRequestFactory, responseProcessor?: JudgeAnalyticsAPIApiResponseProcessor);
    getNormAttorneysAssociatedWithNormJudgeWithHttpInfo(normJudgeId: string, q?: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<AssociatedNormAttorneyResponse1>>;
    getNormAttorneysAssociatedWithNormJudge(normJudgeId: string, q?: string, pageNumber?: number, _options?: Configuration): Observable<AssociatedNormAttorneyResponse1>;
    getNormJudgeByIdWithHttpInfo(normJudgeId: string, _options?: Configuration): Observable<HttpInfo<NormJudge1>>;
    getNormJudgeById(normJudgeId: string, _options?: Configuration): Observable<NormJudge1>;
    getNormLawFirmsAssociatedWithNormJudgeWithHttpInfo(normJudgeId: string, q?: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<AssociatedNormLawFirmResponse1>>;
    getNormLawFirmsAssociatedWithNormJudge(normJudgeId: string, q?: string, pageNumber?: number, _options?: Configuration): Observable<AssociatedNormLawFirmResponse1>;
    getNormPartiesAssociatedWithNormJudgeWithHttpInfo(normJudgeId: string, q?: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<AssociatedNormPartyResponse1>>;
    getNormPartiesAssociatedWithNormJudge(normJudgeId: string, q?: string, pageNumber?: number, _options?: Configuration): Observable<AssociatedNormPartyResponse1>;
    searchNormalizedJudgesWithHttpInfo(q?: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<SearchNormalizedJudges200Response>>;
    searchNormalizedJudges(q?: string, pageNumber?: number, _options?: Configuration): Observable<SearchNormalizedJudges200Response>;
    searchNormalizedJudgesByIdWithHttpInfo(normJudgeSearchId: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<SearchNormalizedJudges200Response>>;
    searchNormalizedJudgesById(normJudgeSearchId: string, pageNumber?: number, _options?: Configuration): Observable<SearchNormalizedJudges200Response>;
}
import { LawFirmAnalyticsAPIApiRequestFactory, LawFirmAnalyticsAPIApiResponseProcessor } from "../apis/LawFirmAnalyticsAPIApi";
export declare class ObservableLawFirmAnalyticsAPIApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: LawFirmAnalyticsAPIApiRequestFactory, responseProcessor?: LawFirmAnalyticsAPIApiResponseProcessor);
    getNormAttorneysAssociatedWithNormLawFirmWithHttpInfo(normLawFirmId: string, q?: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<AssociatedNormAttorneyResponse1>>;
    getNormAttorneysAssociatedWithNormLawFirm(normLawFirmId: string, q?: string, pageNumber?: number, _options?: Configuration): Observable<AssociatedNormAttorneyResponse1>;
    getNormJudgesAssociatedWithNormLawFirmWithHttpInfo(normLawFirmId: string, q?: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<AssociatedNormJudgeResponse1>>;
    getNormJudgesAssociatedWithNormLawFirm(normLawFirmId: string, q?: string, pageNumber?: number, _options?: Configuration): Observable<AssociatedNormJudgeResponse1>;
    getNormLawFirmByIdWithHttpInfo(normLawFirmId: string, _options?: Configuration): Observable<HttpInfo<NormLawFirm1>>;
    getNormLawFirmById(normLawFirmId: string, _options?: Configuration): Observable<NormLawFirm1>;
    getNormPartiesAssociatedWithNormLawFirmWithHttpInfo(normLawFirmId: string, q?: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<AssociatedNormPartyResponse1>>;
    getNormPartiesAssociatedWithNormLawFirm(normLawFirmId: string, q?: string, pageNumber?: number, _options?: Configuration): Observable<AssociatedNormPartyResponse1>;
    searchNormalizedLawFirmsWithHttpInfo(q?: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<SearchNormalizedLawFirms200Response>>;
    searchNormalizedLawFirms(q?: string, pageNumber?: number, _options?: Configuration): Observable<SearchNormalizedLawFirms200Response>;
    searchNormalizedLawFirmsByIdWithHttpInfo(normLawFirmSearchId: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<SearchNormalizedLawFirms200Response>>;
    searchNormalizedLawFirmsById(normLawFirmSearchId: string, pageNumber?: number, _options?: Configuration): Observable<SearchNormalizedLawFirms200Response>;
}
import { PACERAPIApiRequestFactory, PACERAPIApiResponseProcessor } from "../apis/PACERAPIApi";
export declare class ObservablePACERAPIApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: PACERAPIApiRequestFactory, responseProcessor?: PACERAPIApiResponseProcessor);
    allCourtsPacerCaseLocatorCaseSearchWithHttpInfo(pacerUserId: string, pacerClientCode: string, caseNumber?: string, pacerCaseId?: number, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, courtRegionIdArray?: Array<string>, caseFiledStartDate?: Date, caseFiledEndDate?: Date, caseTerminatedStartDate?: Date, caseTerminatedEndDate?: Date, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, _options?: Configuration): Observable<HttpInfo<AllCourtsPacerCaseLocatorCaseSearch200Response>>;
    allCourtsPacerCaseLocatorCaseSearch(pacerUserId: string, pacerClientCode: string, caseNumber?: string, pacerCaseId?: number, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, courtRegionIdArray?: Array<string>, caseFiledStartDate?: Date, caseFiledEndDate?: Date, caseTerminatedStartDate?: Date, caseTerminatedEndDate?: Date, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, _options?: Configuration): Observable<AllCourtsPacerCaseLocatorCaseSearch200Response>;
    allCourtsPacerCaseLocatorPartySearchWithHttpInfo(pacerUserId: string, pacerClientCode: string, caseNumber?: string, pacerCaseId?: number, lastName?: string, firstName?: string, middleName?: string, generation?: string, partyType?: string, partyExactNameMatch?: boolean, partyRoleArray?: Array<string>, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, courtRegionIdArray?: Array<string>, caseYearFrom?: number, caseYearTo?: number, caseFiledStartDate?: Date, caseFiledEndDate?: Date, caseTerminatedStartDate?: Date, caseTerminatedEndDate?: Date, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, _options?: Configuration): Observable<HttpInfo<AllCourtsPacerCaseLocatorPartySearch200Response>>;
    allCourtsPacerCaseLocatorPartySearch(pacerUserId: string, pacerClientCode: string, caseNumber?: string, pacerCaseId?: number, lastName?: string, firstName?: string, middleName?: string, generation?: string, partyType?: string, partyExactNameMatch?: boolean, partyRoleArray?: Array<string>, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, courtRegionIdArray?: Array<string>, caseYearFrom?: number, caseYearTo?: number, caseFiledStartDate?: Date, caseFiledEndDate?: Date, caseTerminatedStartDate?: Date, caseTerminatedEndDate?: Date, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, _options?: Configuration): Observable<AllCourtsPacerCaseLocatorPartySearch200Response>;
    appealCourtsPacerCaseLocatorCaseSearchWithHttpInfo(pacerUserId: string, pacerClientCode: string, caseNumber?: string, pacerCaseId?: number, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, natureOfSuitsArray?: Array<string>, courtRegionIdArray?: Array<string>, caseFiledStartDate?: Date, caseFiledEndDate?: Date, caseTerminatedStartDate?: Date, caseTerminatedEndDate?: Date, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, _options?: Configuration): Observable<HttpInfo<AllCourtsPacerCaseLocatorCaseSearch200Response>>;
    appealCourtsPacerCaseLocatorCaseSearch(pacerUserId: string, pacerClientCode: string, caseNumber?: string, pacerCaseId?: number, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, natureOfSuitsArray?: Array<string>, courtRegionIdArray?: Array<string>, caseFiledStartDate?: Date, caseFiledEndDate?: Date, caseTerminatedStartDate?: Date, caseTerminatedEndDate?: Date, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, _options?: Configuration): Observable<AllCourtsPacerCaseLocatorCaseSearch200Response>;
    appealCourtsPacerCaseLocatorPartySearchWithHttpInfo(pacerUserId: string, pacerClientCode: string, caseNumber?: string, pacerCaseId?: number, lastName?: string, firstName?: string, middleName?: string, generation?: string, partyType?: string, partyExactNameMatch?: boolean, partyRoleArray?: Array<string>, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, courtRegionIdArray?: Array<string>, caseYearFrom?: number, caseYearTo?: number, caseFiledStartDate?: Date, caseFiledEndDate?: Date, caseTerminatedStartDate?: Date, caseTerminatedEndDate?: Date, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, _options?: Configuration): Observable<HttpInfo<AllCourtsPacerCaseLocatorPartySearch200Response>>;
    appealCourtsPacerCaseLocatorPartySearch(pacerUserId: string, pacerClientCode: string, caseNumber?: string, pacerCaseId?: number, lastName?: string, firstName?: string, middleName?: string, generation?: string, partyType?: string, partyExactNameMatch?: boolean, partyRoleArray?: Array<string>, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, courtRegionIdArray?: Array<string>, caseYearFrom?: number, caseYearTo?: number, caseFiledStartDate?: Date, caseFiledEndDate?: Date, caseTerminatedStartDate?: Date, caseTerminatedEndDate?: Date, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, _options?: Configuration): Observable<AllCourtsPacerCaseLocatorPartySearch200Response>;
    bankruptcyCourtsPacerCaseLocatorCaseSearchWithHttpInfo(pacerUserId: string, pacerClientCode: string, caseNumber?: string, pacerCaseId?: number, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, federalBankruptcyChapterArray?: Array<string>, courtRegionIdArray?: Array<string>, caseFiledStartDate?: Date, caseFiledEndDate?: Date, caseTerminatedStartDate?: Date, caseTerminatedEndDate?: Date, caseDischargedStartDate?: Date, caseDischargedEndDate?: Date, caseDismissedStartDate?: Date, caseDismissedEndDate?: Date, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, _options?: Configuration): Observable<HttpInfo<AllCourtsPacerCaseLocatorCaseSearch200Response>>;
    bankruptcyCourtsPacerCaseLocatorCaseSearch(pacerUserId: string, pacerClientCode: string, caseNumber?: string, pacerCaseId?: number, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, federalBankruptcyChapterArray?: Array<string>, courtRegionIdArray?: Array<string>, caseFiledStartDate?: Date, caseFiledEndDate?: Date, caseTerminatedStartDate?: Date, caseTerminatedEndDate?: Date, caseDischargedStartDate?: Date, caseDischargedEndDate?: Date, caseDismissedStartDate?: Date, caseDismissedEndDate?: Date, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, _options?: Configuration): Observable<AllCourtsPacerCaseLocatorCaseSearch200Response>;
    bankruptcyCourtsPacerCaseLocatorPartySearchWithHttpInfo(pacerUserId: string, pacerClientCode: string, caseNumber?: string, pacerCaseId?: number, lastName?: string, firstName?: string, middleName?: string, generation?: string, partyType?: string, partyExactNameMatch?: boolean, partyRoleArray?: Array<string>, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, courtRegionIdArray?: Array<string>, caseYearFrom?: number, caseYearTo?: number, ssnOrEin?: string, fourDigitSsn?: string, caseFiledStartDate?: Date, caseFiledEndDate?: Date, caseTerminatedStartDate?: Date, caseTerminatedEndDate?: Date, caseDischargedStartDate?: Date, caseDischargedEndDate?: Date, caseDismissedStartDate?: Date, caseDismissedEndDate?: Date, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, _options?: Configuration): Observable<HttpInfo<AllCourtsPacerCaseLocatorPartySearch200Response>>;
    bankruptcyCourtsPacerCaseLocatorPartySearch(pacerUserId: string, pacerClientCode: string, caseNumber?: string, pacerCaseId?: number, lastName?: string, firstName?: string, middleName?: string, generation?: string, partyType?: string, partyExactNameMatch?: boolean, partyRoleArray?: Array<string>, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, courtRegionIdArray?: Array<string>, caseYearFrom?: number, caseYearTo?: number, ssnOrEin?: string, fourDigitSsn?: string, caseFiledStartDate?: Date, caseFiledEndDate?: Date, caseTerminatedStartDate?: Date, caseTerminatedEndDate?: Date, caseDischargedStartDate?: Date, caseDischargedEndDate?: Date, caseDismissedStartDate?: Date, caseDismissedEndDate?: Date, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, _options?: Configuration): Observable<AllCourtsPacerCaseLocatorPartySearch200Response>;
    civilCourtsPacerCaseLocatorCaseSearchWithHttpInfo(pacerUserId: string, pacerClientCode: string, caseNumber?: string, pacerCaseId?: number, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, natureOfSuitsArray?: Array<string>, courtRegionIdArray?: Array<string>, caseFiledStartDate?: Date, caseFiledEndDate?: Date, caseTerminatedStartDate?: Date, caseTerminatedEndDate?: Date, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, _options?: Configuration): Observable<HttpInfo<AllCourtsPacerCaseLocatorCaseSearch200Response>>;
    civilCourtsPacerCaseLocatorCaseSearch(pacerUserId: string, pacerClientCode: string, caseNumber?: string, pacerCaseId?: number, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, natureOfSuitsArray?: Array<string>, courtRegionIdArray?: Array<string>, caseFiledStartDate?: Date, caseFiledEndDate?: Date, caseTerminatedStartDate?: Date, caseTerminatedEndDate?: Date, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, _options?: Configuration): Observable<AllCourtsPacerCaseLocatorCaseSearch200Response>;
    civilCourtsPacerCaseLocatorPartySearchWithHttpInfo(pacerUserId: string, pacerClientCode: string, caseNumber?: string, pacerCaseId?: number, lastName?: string, firstName?: string, middleName?: string, generation?: string, partyType?: string, partyExactNameMatch?: boolean, partyRoleArray?: Array<string>, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, courtRegionIdArray?: Array<string>, caseYearFrom?: number, caseYearTo?: number, caseFiledStartDate?: Date, caseFiledEndDate?: Date, caseTerminatedStartDate?: Date, caseTerminatedEndDate?: Date, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, _options?: Configuration): Observable<HttpInfo<AllCourtsPacerCaseLocatorPartySearch200Response>>;
    civilCourtsPacerCaseLocatorPartySearch(pacerUserId: string, pacerClientCode: string, caseNumber?: string, pacerCaseId?: number, lastName?: string, firstName?: string, middleName?: string, generation?: string, partyType?: string, partyExactNameMatch?: boolean, partyRoleArray?: Array<string>, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, courtRegionIdArray?: Array<string>, caseYearFrom?: number, caseYearTo?: number, caseFiledStartDate?: Date, caseFiledEndDate?: Date, caseTerminatedStartDate?: Date, caseTerminatedEndDate?: Date, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, _options?: Configuration): Observable<AllCourtsPacerCaseLocatorPartySearch200Response>;
    criminalCourtsPacerCaseLocatorCaseSearchWithHttpInfo(pacerUserId: string, pacerClientCode: string, caseNumber?: string, pacerCaseId?: number, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, courtRegionIdArray?: Array<string>, caseFiledStartDate?: Date, caseFiledEndDate?: Date, caseTerminatedStartDate?: Date, caseTerminatedEndDate?: Date, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, _options?: Configuration): Observable<HttpInfo<AllCourtsPacerCaseLocatorCaseSearch200Response>>;
    criminalCourtsPacerCaseLocatorCaseSearch(pacerUserId: string, pacerClientCode: string, caseNumber?: string, pacerCaseId?: number, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, courtRegionIdArray?: Array<string>, caseFiledStartDate?: Date, caseFiledEndDate?: Date, caseTerminatedStartDate?: Date, caseTerminatedEndDate?: Date, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, _options?: Configuration): Observable<AllCourtsPacerCaseLocatorCaseSearch200Response>;
    criminalCourtsPacerCaseLocatorPartySearchWithHttpInfo(pacerUserId: string, pacerClientCode: string, caseNumber?: string, pacerCaseId?: number, lastName?: string, firstName?: string, middleName?: string, generation?: string, partyType?: string, partyExactNameMatch?: boolean, partyRoleArray?: Array<string>, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, courtRegionIdArray?: Array<string>, caseYearFrom?: number, caseYearTo?: number, caseFiledStartDate?: Date, caseFiledEndDate?: Date, caseTerminatedStartDate?: Date, caseTerminatedEndDate?: Date, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, _options?: Configuration): Observable<HttpInfo<AllCourtsPacerCaseLocatorPartySearch200Response>>;
    criminalCourtsPacerCaseLocatorPartySearch(pacerUserId: string, pacerClientCode: string, caseNumber?: string, pacerCaseId?: number, lastName?: string, firstName?: string, middleName?: string, generation?: string, partyType?: string, partyExactNameMatch?: boolean, partyRoleArray?: Array<string>, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, courtRegionIdArray?: Array<string>, caseYearFrom?: number, caseYearTo?: number, caseFiledStartDate?: Date, caseFiledEndDate?: Date, caseTerminatedStartDate?: Date, caseTerminatedEndDate?: Date, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, _options?: Configuration): Observable<AllCourtsPacerCaseLocatorPartySearch200Response>;
    importPacerCaseByCourtUsingCaseNumberWithHttpInfo(pacerUserId: string, pacerClientCode: string, caseNumber: string, courtId: string, _options?: Configuration): Observable<HttpInfo<ImportPacerCaseByCourtUsingCaseNumber200Response>>;
    importPacerCaseByCourtUsingCaseNumber(pacerUserId: string, pacerClientCode: string, caseNumber: string, courtId: string, _options?: Configuration): Observable<ImportPacerCaseByCourtUsingCaseNumber200Response>;
    multiDistrictCourtsPacerCaseLocatorCaseSearchWithHttpInfo(pacerUserId: string, pacerClientCode: string, caseNumber?: string, jpmlNumber?: number, pacerCaseId?: number, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, courtRegionIdArray?: Array<string>, caseFiledStartDate?: Date, caseFiledEndDate?: Date, caseTerminatedStartDate?: Date, caseTerminatedEndDate?: Date, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, _options?: Configuration): Observable<HttpInfo<AllCourtsPacerCaseLocatorCaseSearch200Response>>;
    multiDistrictCourtsPacerCaseLocatorCaseSearch(pacerUserId: string, pacerClientCode: string, caseNumber?: string, jpmlNumber?: number, pacerCaseId?: number, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, courtRegionIdArray?: Array<string>, caseFiledStartDate?: Date, caseFiledEndDate?: Date, caseTerminatedStartDate?: Date, caseTerminatedEndDate?: Date, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, _options?: Configuration): Observable<AllCourtsPacerCaseLocatorCaseSearch200Response>;
    multiDistrictCourtsPacerCaseLocatorPartySearchWithHttpInfo(pacerUserId: string, pacerClientCode: string, caseNumber?: string, jpmlNumber?: number, pacerCaseId?: number, lastName?: string, firstName?: string, middleName?: string, generation?: string, partyType?: string, partyExactNameMatch?: boolean, partyRoleArray?: Array<string>, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, courtRegionIdArray?: Array<string>, caseYearFrom?: number, caseYearTo?: number, caseFiledStartDate?: Date, caseFiledEndDate?: Date, caseTerminatedStartDate?: Date, caseTerminatedEndDate?: Date, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, _options?: Configuration): Observable<HttpInfo<AllCourtsPacerCaseLocatorPartySearch200Response>>;
    multiDistrictCourtsPacerCaseLocatorPartySearch(pacerUserId: string, pacerClientCode: string, caseNumber?: string, jpmlNumber?: number, pacerCaseId?: number, lastName?: string, firstName?: string, middleName?: string, generation?: string, partyType?: string, partyExactNameMatch?: boolean, partyRoleArray?: Array<string>, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, courtRegionIdArray?: Array<string>, caseYearFrom?: number, caseYearTo?: number, caseFiledStartDate?: Date, caseFiledEndDate?: Date, caseTerminatedStartDate?: Date, caseTerminatedEndDate?: Date, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, _options?: Configuration): Observable<AllCourtsPacerCaseLocatorPartySearch200Response>;
}
import { PACERCredentialAPIApiRequestFactory, PACERCredentialAPIApiResponseProcessor } from "../apis/PACERCredentialAPIApi";
export declare class ObservablePACERCredentialAPIApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: PACERCredentialAPIApiRequestFactory, responseProcessor?: PACERCredentialAPIApiResponseProcessor);
    addPacerCredentialWithHttpInfo(addPacerCredentialRequest?: AddPacerCredentialRequest, _options?: Configuration): Observable<HttpInfo<Success1>>;
    addPacerCredential(addPacerCredentialRequest?: AddPacerCredentialRequest, _options?: Configuration): Observable<Success1>;
    getPacerCredentialWithHttpInfo(pageNumber?: number, _options?: Configuration): Observable<HttpInfo<GetPacerCredential200Response>>;
    getPacerCredential(pageNumber?: number, _options?: Configuration): Observable<GetPacerCredential200Response>;
    getPacerCredentialByIdWithHttpInfo(pacerUserId: string, _options?: Configuration): Observable<HttpInfo<GetPacerCredential200ResponsePacerCredentialArrayInner>>;
    getPacerCredentialById(pacerUserId: string, _options?: Configuration): Observable<GetPacerCredential200ResponsePacerCredentialArrayInner>;
    removePacerCredentialByIdWithHttpInfo(pacerUserId: string, _options?: Configuration): Observable<HttpInfo<Success1>>;
    removePacerCredentialById(pacerUserId: string, _options?: Configuration): Observable<Success1>;
}
import { PartyAnalyticsAPIApiRequestFactory, PartyAnalyticsAPIApiResponseProcessor } from "../apis/PartyAnalyticsAPIApi";
export declare class ObservablePartyAnalyticsAPIApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: PartyAnalyticsAPIApiRequestFactory, responseProcessor?: PartyAnalyticsAPIApiResponseProcessor);
    getNormAttorneysAssociatedWithNormPartyWithHttpInfo(normPartyId: string, q?: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<AssociatedNormAttorneyResponse1>>;
    getNormAttorneysAssociatedWithNormParty(normPartyId: string, q?: string, pageNumber?: number, _options?: Configuration): Observable<AssociatedNormAttorneyResponse1>;
    getNormJudgesAssociatedWithNormPartyWithHttpInfo(normPartyId: string, q?: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<AssociatedNormJudgeResponse1>>;
    getNormJudgesAssociatedWithNormParty(normPartyId: string, q?: string, pageNumber?: number, _options?: Configuration): Observable<AssociatedNormJudgeResponse1>;
    getNormLawFirmsAssociatedWithNormPartyWithHttpInfo(normPartyId: string, q?: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<AssociatedNormLawFirmResponse1>>;
    getNormLawFirmsAssociatedWithNormParty(normPartyId: string, q?: string, pageNumber?: number, _options?: Configuration): Observable<AssociatedNormLawFirmResponse1>;
    getNormPartyByIdWithHttpInfo(normPartyId: string, _options?: Configuration): Observable<HttpInfo<NormParty1>>;
    getNormPartyById(normPartyId: string, _options?: Configuration): Observable<NormParty1>;
    searchNormalizedPartiesWithHttpInfo(q?: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<SearchNormalizedParties200Response>>;
    searchNormalizedParties(q?: string, pageNumber?: number, _options?: Configuration): Observable<SearchNormalizedParties200Response>;
    searchNormalizedPartiesByIdWithHttpInfo(normPartySearchId: string, pageNumber?: number, _options?: Configuration): Observable<HttpInfo<SearchNormalizedParties200Response>>;
    searchNormalizedPartiesById(normPartySearchId: string, pageNumber?: number, _options?: Configuration): Observable<SearchNormalizedParties200Response>;
}
import { UsageAPIApiRequestFactory, UsageAPIApiResponseProcessor } from "../apis/UsageAPIApi";
export declare class ObservableUsageAPIApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: UsageAPIApiRequestFactory, responseProcessor?: UsageAPIApiResponseProcessor);
    getBillingCyclesWithHttpInfo(_options?: Configuration): Observable<HttpInfo<GetBillingCycles200Response>>;
    getBillingCycles(_options?: Configuration): Observable<GetBillingCycles200Response>;
    getBillingUsageByBillingCycleWithHttpInfo(billingCycle: string, _options?: Configuration): Observable<HttpInfo<GetBillingUsageByBillingCycle200Response>>;
    getBillingUsageByBillingCycle(billingCycle: string, _options?: Configuration): Observable<GetBillingUsageByBillingCycle200Response>;
    getDailyUsageByDateWithHttpInfo(date: string, _options?: Configuration): Observable<HttpInfo<GetDailyUsageByDate200Response>>;
    getDailyUsageByDate(date: string, _options?: Configuration): Observable<GetDailyUsageByDate200Response>;
}
