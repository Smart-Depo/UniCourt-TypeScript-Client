import { BaseAPIRequestFactory } from './baseapi';
import { Configuration } from '../configuration';
import { RequestContext, ResponseContext, HttpInfo } from '../http/http';
import { AllCourtsPacerCaseLocatorCaseSearch200Response } from '../models/AllCourtsPacerCaseLocatorCaseSearch200Response';
import { AllCourtsPacerCaseLocatorPartySearch200Response } from '../models/AllCourtsPacerCaseLocatorPartySearch200Response';
import { ImportPacerCaseByCourtUsingCaseNumber200Response } from '../models/ImportPacerCaseByCourtUsingCaseNumber200Response';
export declare class PACERAPIApiRequestFactory extends BaseAPIRequestFactory {
    allCourtsPacerCaseLocatorCaseSearch(pacerUserId: string, pacerClientCode: string, caseNumber?: string, pacerCaseId?: number, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, courtRegionIdArray?: Array<string>, caseFiledStartDate?: Date, caseFiledEndDate?: Date, caseTerminatedStartDate?: Date, caseTerminatedEndDate?: Date, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, _options?: Configuration): Promise<RequestContext>;
    allCourtsPacerCaseLocatorPartySearch(pacerUserId: string, pacerClientCode: string, caseNumber?: string, pacerCaseId?: number, lastName?: string, firstName?: string, middleName?: string, generation?: string, partyType?: string, partyExactNameMatch?: boolean, partyRoleArray?: Array<string>, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, courtRegionIdArray?: Array<string>, caseYearFrom?: number, caseYearTo?: number, caseFiledStartDate?: Date, caseFiledEndDate?: Date, caseTerminatedStartDate?: Date, caseTerminatedEndDate?: Date, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, _options?: Configuration): Promise<RequestContext>;
    appealCourtsPacerCaseLocatorCaseSearch(pacerUserId: string, pacerClientCode: string, caseNumber?: string, pacerCaseId?: number, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, natureOfSuitsArray?: Array<string>, courtRegionIdArray?: Array<string>, caseFiledStartDate?: Date, caseFiledEndDate?: Date, caseTerminatedStartDate?: Date, caseTerminatedEndDate?: Date, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, _options?: Configuration): Promise<RequestContext>;
    appealCourtsPacerCaseLocatorPartySearch(pacerUserId: string, pacerClientCode: string, caseNumber?: string, pacerCaseId?: number, lastName?: string, firstName?: string, middleName?: string, generation?: string, partyType?: string, partyExactNameMatch?: boolean, partyRoleArray?: Array<string>, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, courtRegionIdArray?: Array<string>, caseYearFrom?: number, caseYearTo?: number, caseFiledStartDate?: Date, caseFiledEndDate?: Date, caseTerminatedStartDate?: Date, caseTerminatedEndDate?: Date, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, _options?: Configuration): Promise<RequestContext>;
    bankruptcyCourtsPacerCaseLocatorCaseSearch(pacerUserId: string, pacerClientCode: string, caseNumber?: string, pacerCaseId?: number, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, federalBankruptcyChapterArray?: Array<string>, courtRegionIdArray?: Array<string>, caseFiledStartDate?: Date, caseFiledEndDate?: Date, caseTerminatedStartDate?: Date, caseTerminatedEndDate?: Date, caseDischargedStartDate?: Date, caseDischargedEndDate?: Date, caseDismissedStartDate?: Date, caseDismissedEndDate?: Date, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, _options?: Configuration): Promise<RequestContext>;
    bankruptcyCourtsPacerCaseLocatorPartySearch(pacerUserId: string, pacerClientCode: string, caseNumber?: string, pacerCaseId?: number, lastName?: string, firstName?: string, middleName?: string, generation?: string, partyType?: string, partyExactNameMatch?: boolean, partyRoleArray?: Array<string>, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, courtRegionIdArray?: Array<string>, caseYearFrom?: number, caseYearTo?: number, ssnOrEin?: string, fourDigitSsn?: string, caseFiledStartDate?: Date, caseFiledEndDate?: Date, caseTerminatedStartDate?: Date, caseTerminatedEndDate?: Date, caseDischargedStartDate?: Date, caseDischargedEndDate?: Date, caseDismissedStartDate?: Date, caseDismissedEndDate?: Date, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, _options?: Configuration): Promise<RequestContext>;
    civilCourtsPacerCaseLocatorCaseSearch(pacerUserId: string, pacerClientCode: string, caseNumber?: string, pacerCaseId?: number, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, natureOfSuitsArray?: Array<string>, courtRegionIdArray?: Array<string>, caseFiledStartDate?: Date, caseFiledEndDate?: Date, caseTerminatedStartDate?: Date, caseTerminatedEndDate?: Date, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, _options?: Configuration): Promise<RequestContext>;
    civilCourtsPacerCaseLocatorPartySearch(pacerUserId: string, pacerClientCode: string, caseNumber?: string, pacerCaseId?: number, lastName?: string, firstName?: string, middleName?: string, generation?: string, partyType?: string, partyExactNameMatch?: boolean, partyRoleArray?: Array<string>, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, courtRegionIdArray?: Array<string>, caseYearFrom?: number, caseYearTo?: number, caseFiledStartDate?: Date, caseFiledEndDate?: Date, caseTerminatedStartDate?: Date, caseTerminatedEndDate?: Date, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, _options?: Configuration): Promise<RequestContext>;
    criminalCourtsPacerCaseLocatorCaseSearch(pacerUserId: string, pacerClientCode: string, caseNumber?: string, pacerCaseId?: number, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, courtRegionIdArray?: Array<string>, caseFiledStartDate?: Date, caseFiledEndDate?: Date, caseTerminatedStartDate?: Date, caseTerminatedEndDate?: Date, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, _options?: Configuration): Promise<RequestContext>;
    criminalCourtsPacerCaseLocatorPartySearch(pacerUserId: string, pacerClientCode: string, caseNumber?: string, pacerCaseId?: number, lastName?: string, firstName?: string, middleName?: string, generation?: string, partyType?: string, partyExactNameMatch?: boolean, partyRoleArray?: Array<string>, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, courtRegionIdArray?: Array<string>, caseYearFrom?: number, caseYearTo?: number, caseFiledStartDate?: Date, caseFiledEndDate?: Date, caseTerminatedStartDate?: Date, caseTerminatedEndDate?: Date, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, _options?: Configuration): Promise<RequestContext>;
    importPacerCaseByCourtUsingCaseNumber(pacerUserId: string, pacerClientCode: string, caseNumber: string, courtId: string, _options?: Configuration): Promise<RequestContext>;
    multiDistrictCourtsPacerCaseLocatorCaseSearch(pacerUserId: string, pacerClientCode: string, caseNumber?: string, jpmlNumber?: number, pacerCaseId?: number, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, courtRegionIdArray?: Array<string>, caseFiledStartDate?: Date, caseFiledEndDate?: Date, caseTerminatedStartDate?: Date, caseTerminatedEndDate?: Date, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, _options?: Configuration): Promise<RequestContext>;
    multiDistrictCourtsPacerCaseLocatorPartySearch(pacerUserId: string, pacerClientCode: string, caseNumber?: string, jpmlNumber?: number, pacerCaseId?: number, lastName?: string, firstName?: string, middleName?: string, generation?: string, partyType?: string, partyExactNameMatch?: boolean, partyRoleArray?: Array<string>, caseTitle?: string, caseOffice?: number, caseSequenceNumber?: number, caseYear?: number, caseTypeArray?: Array<string>, courtRegionIdArray?: Array<string>, caseYearFrom?: number, caseYearTo?: number, caseFiledStartDate?: Date, caseFiledEndDate?: Date, caseTerminatedStartDate?: Date, caseTerminatedEndDate?: Date, sortParameterQuery?: string, caseStatus?: 'open' | 'closed', pageNumber?: number, _options?: Configuration): Promise<RequestContext>;
}
export declare class PACERAPIApiResponseProcessor {
    allCourtsPacerCaseLocatorCaseSearchWithHttpInfo(response: ResponseContext): Promise<HttpInfo<AllCourtsPacerCaseLocatorCaseSearch200Response>>;
    allCourtsPacerCaseLocatorPartySearchWithHttpInfo(response: ResponseContext): Promise<HttpInfo<AllCourtsPacerCaseLocatorPartySearch200Response>>;
    appealCourtsPacerCaseLocatorCaseSearchWithHttpInfo(response: ResponseContext): Promise<HttpInfo<AllCourtsPacerCaseLocatorCaseSearch200Response>>;
    appealCourtsPacerCaseLocatorPartySearchWithHttpInfo(response: ResponseContext): Promise<HttpInfo<AllCourtsPacerCaseLocatorPartySearch200Response>>;
    bankruptcyCourtsPacerCaseLocatorCaseSearchWithHttpInfo(response: ResponseContext): Promise<HttpInfo<AllCourtsPacerCaseLocatorCaseSearch200Response>>;
    bankruptcyCourtsPacerCaseLocatorPartySearchWithHttpInfo(response: ResponseContext): Promise<HttpInfo<AllCourtsPacerCaseLocatorPartySearch200Response>>;
    civilCourtsPacerCaseLocatorCaseSearchWithHttpInfo(response: ResponseContext): Promise<HttpInfo<AllCourtsPacerCaseLocatorCaseSearch200Response>>;
    civilCourtsPacerCaseLocatorPartySearchWithHttpInfo(response: ResponseContext): Promise<HttpInfo<AllCourtsPacerCaseLocatorPartySearch200Response>>;
    criminalCourtsPacerCaseLocatorCaseSearchWithHttpInfo(response: ResponseContext): Promise<HttpInfo<AllCourtsPacerCaseLocatorCaseSearch200Response>>;
    criminalCourtsPacerCaseLocatorPartySearchWithHttpInfo(response: ResponseContext): Promise<HttpInfo<AllCourtsPacerCaseLocatorPartySearch200Response>>;
    importPacerCaseByCourtUsingCaseNumberWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ImportPacerCaseByCourtUsingCaseNumber200Response>>;
    multiDistrictCourtsPacerCaseLocatorCaseSearchWithHttpInfo(response: ResponseContext): Promise<HttpInfo<AllCourtsPacerCaseLocatorCaseSearch200Response>>;
    multiDistrictCourtsPacerCaseLocatorPartySearchWithHttpInfo(response: ResponseContext): Promise<HttpInfo<AllCourtsPacerCaseLocatorPartySearch200Response>>;
}
