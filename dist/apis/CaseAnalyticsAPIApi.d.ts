import { BaseAPIRequestFactory } from './baseapi';
import { Configuration } from '../configuration';
import { RequestContext, ResponseContext, HttpInfo } from '../http/http';
import { CaseCountAnalyticsByAreaOfLawResponse1 } from '../models/CaseCountAnalyticsByAreaOfLawResponse1';
import { CaseCountAnalyticsByCaseClassResponse1 } from '../models/CaseCountAnalyticsByCaseClassResponse1';
import { CaseCountAnalyticsByCaseFiledDateResponse1 } from '../models/CaseCountAnalyticsByCaseFiledDateResponse1';
import { CaseCountAnalyticsByCaseTypeGroupResponse1 } from '../models/CaseCountAnalyticsByCaseTypeGroupResponse1';
import { CaseCountAnalyticsByCaseTypeResponse1 } from '../models/CaseCountAnalyticsByCaseTypeResponse1';
import { CaseCountAnalyticsByCourtLocationResponse1 } from '../models/CaseCountAnalyticsByCourtLocationResponse1';
import { CaseCountAnalyticsByCourtResponse1 } from '../models/CaseCountAnalyticsByCourtResponse1';
import { CaseCountAnalyticsByCourtSystemResponse1 } from '../models/CaseCountAnalyticsByCourtSystemResponse1';
import { CaseCountAnalyticsByCourtTypeResponse1 } from '../models/CaseCountAnalyticsByCourtTypeResponse1';
import { CaseCountAnalyticsByJurisdictionGeoResponse1 } from '../models/CaseCountAnalyticsByJurisdictionGeoResponse1';
import { CaseCountAnalyticsByNormAttorneyResponse1 } from '../models/CaseCountAnalyticsByNormAttorneyResponse1';
import { CaseCountAnalyticsByNormJudgeResponse1 } from '../models/CaseCountAnalyticsByNormJudgeResponse1';
import { CaseCountAnalyticsByNormLawFirmResponse1 } from '../models/CaseCountAnalyticsByNormLawFirmResponse1';
import { CaseCountAnalyticsByNormPartyResponse1 } from '../models/CaseCountAnalyticsByNormPartyResponse1';
import { CaseCountAnalyticsByPartyRoleGroupResponse1 } from '../models/CaseCountAnalyticsByPartyRoleGroupResponse1';
import { CaseCountAnalyticsByPartyRoleResponse1 } from '../models/CaseCountAnalyticsByPartyRoleResponse1';
export declare class CaseAnalyticsAPIApiRequestFactory extends BaseAPIRequestFactory {
    getCaseCountAnalyticsByAreaOfLaw(q?: string, pageNumber?: number, _options?: Configuration): Promise<RequestContext>;
    getCaseCountAnalyticsByCaseClass(q?: string, pageNumber?: number, _options?: Configuration): Promise<RequestContext>;
    getCaseCountAnalyticsByCaseFiledDate(groupBy: 'Yearly' | 'Quarterly' | 'Monthly' | 'Weekly', q?: string, pageNumber?: number, _options?: Configuration): Promise<RequestContext>;
    getCaseCountAnalyticsByCaseType(q?: string, pageNumber?: number, _options?: Configuration): Promise<RequestContext>;
    getCaseCountAnalyticsByCaseTypeGroup(q?: string, pageNumber?: number, _options?: Configuration): Promise<RequestContext>;
    getCaseCountAnalyticsByCourt(q?: string, pageNumber?: number, _options?: Configuration): Promise<RequestContext>;
    getCaseCountAnalyticsByCourtLocation(q?: string, pageNumber?: number, _options?: Configuration): Promise<RequestContext>;
    getCaseCountAnalyticsByCourtSystem(q?: string, pageNumber?: number, _options?: Configuration): Promise<RequestContext>;
    getCaseCountAnalyticsByCourtType(q?: string, pageNumber?: number, _options?: Configuration): Promise<RequestContext>;
    getCaseCountAnalyticsByJurisdictionGeo(q?: string, pageNumber?: number, _options?: Configuration): Promise<RequestContext>;
    getCaseCountAnalyticsByNormAttorney(q?: string, pageNumber?: number, _options?: Configuration): Promise<RequestContext>;
    getCaseCountAnalyticsByNormJudge(q?: string, pageNumber?: number, _options?: Configuration): Promise<RequestContext>;
    getCaseCountAnalyticsByNormLawFirm(q?: string, pageNumber?: number, _options?: Configuration): Promise<RequestContext>;
    getCaseCountAnalyticsByNormParty(q?: string, pageNumber?: number, _options?: Configuration): Promise<RequestContext>;
    getCaseCountAnalyticsByOpposingNormAttorneyForANormAttorney(normAttorneyId: string, q?: string, pageNumber?: number, _options?: Configuration): Promise<RequestContext>;
    getCaseCountAnalyticsByOpposingNormLawFirmForANormLawFirm(normLawFirmId: string, q?: string, pageNumber?: number, _options?: Configuration): Promise<RequestContext>;
    getCaseCountAnalyticsByOpposingNormPartyForANormParty(normPartyId: string, q?: string, pageNumber?: number, _options?: Configuration): Promise<RequestContext>;
    getCaseCountAnalyticsByPartyRole(q?: string, pageNumber?: number, _options?: Configuration): Promise<RequestContext>;
    getCaseCountAnalyticsByPartyRoleGroup(q?: string, pageNumber?: number, _options?: Configuration): Promise<RequestContext>;
}
export declare class CaseAnalyticsAPIApiResponseProcessor {
    getCaseCountAnalyticsByAreaOfLawWithHttpInfo(response: ResponseContext): Promise<HttpInfo<CaseCountAnalyticsByAreaOfLawResponse1>>;
    getCaseCountAnalyticsByCaseClassWithHttpInfo(response: ResponseContext): Promise<HttpInfo<CaseCountAnalyticsByCaseClassResponse1>>;
    getCaseCountAnalyticsByCaseFiledDateWithHttpInfo(response: ResponseContext): Promise<HttpInfo<CaseCountAnalyticsByCaseFiledDateResponse1>>;
    getCaseCountAnalyticsByCaseTypeWithHttpInfo(response: ResponseContext): Promise<HttpInfo<CaseCountAnalyticsByCaseTypeResponse1>>;
    getCaseCountAnalyticsByCaseTypeGroupWithHttpInfo(response: ResponseContext): Promise<HttpInfo<CaseCountAnalyticsByCaseTypeGroupResponse1>>;
    getCaseCountAnalyticsByCourtWithHttpInfo(response: ResponseContext): Promise<HttpInfo<CaseCountAnalyticsByCourtResponse1>>;
    getCaseCountAnalyticsByCourtLocationWithHttpInfo(response: ResponseContext): Promise<HttpInfo<CaseCountAnalyticsByCourtLocationResponse1>>;
    getCaseCountAnalyticsByCourtSystemWithHttpInfo(response: ResponseContext): Promise<HttpInfo<CaseCountAnalyticsByCourtSystemResponse1>>;
    getCaseCountAnalyticsByCourtTypeWithHttpInfo(response: ResponseContext): Promise<HttpInfo<CaseCountAnalyticsByCourtTypeResponse1>>;
    getCaseCountAnalyticsByJurisdictionGeoWithHttpInfo(response: ResponseContext): Promise<HttpInfo<CaseCountAnalyticsByJurisdictionGeoResponse1>>;
    getCaseCountAnalyticsByNormAttorneyWithHttpInfo(response: ResponseContext): Promise<HttpInfo<CaseCountAnalyticsByNormAttorneyResponse1>>;
    getCaseCountAnalyticsByNormJudgeWithHttpInfo(response: ResponseContext): Promise<HttpInfo<CaseCountAnalyticsByNormJudgeResponse1>>;
    getCaseCountAnalyticsByNormLawFirmWithHttpInfo(response: ResponseContext): Promise<HttpInfo<CaseCountAnalyticsByNormLawFirmResponse1>>;
    getCaseCountAnalyticsByNormPartyWithHttpInfo(response: ResponseContext): Promise<HttpInfo<CaseCountAnalyticsByNormPartyResponse1>>;
    getCaseCountAnalyticsByOpposingNormAttorneyForANormAttorneyWithHttpInfo(response: ResponseContext): Promise<HttpInfo<CaseCountAnalyticsByNormAttorneyResponse1>>;
    getCaseCountAnalyticsByOpposingNormLawFirmForANormLawFirmWithHttpInfo(response: ResponseContext): Promise<HttpInfo<CaseCountAnalyticsByNormLawFirmResponse1>>;
    getCaseCountAnalyticsByOpposingNormPartyForANormPartyWithHttpInfo(response: ResponseContext): Promise<HttpInfo<CaseCountAnalyticsByNormPartyResponse1>>;
    getCaseCountAnalyticsByPartyRoleWithHttpInfo(response: ResponseContext): Promise<HttpInfo<CaseCountAnalyticsByPartyRoleResponse1>>;
    getCaseCountAnalyticsByPartyRoleGroupWithHttpInfo(response: ResponseContext): Promise<HttpInfo<CaseCountAnalyticsByPartyRoleGroupResponse1>>;
}
